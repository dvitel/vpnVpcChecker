---
Description: Setup of VPC tester as EC2 instance

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 keypair to enable SSH access to the instance

  SSHCIDR:
    Type: String
    Description: The CIDR block restricting SSH
    MinLength: 9
    Default: 131.247.0.0/16
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x

  USFBucket:
    Type: String
    Description: Should contain students.csv and cc.pem 
  
Mappings:
  Region2AMI:
    us-east-1: 
      AMI: ami-04505e74c0741db8d 
    us-east-2:
      AMI: ami-0fb653ca2d3203ac1

Resources:
  USFBucketRole: 
    Type: AWS::IAM::Role
    Properties:
      Description: Allows access to secure usf bucket from ec2
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'         
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow           
                Action:
                  - 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${USFBucket}/*'
          PolicyName: USFSecureGetObjects
  VPCTesterInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref USFBucketRole            
  VPCTesterInstance:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Authentication':
        S3AccessCreds:
          type: S3
          buckets:
            - !Sub ${USFBucket}          
          roleName: !Ref USFBucketRole
      'AWS::CloudFormation::Init':
          configSets:
            InstallAndRun:
              - Install
              - Install2
          Install:                      
            sources: 
              "/home/ubuntu/vpc": "https://github.com/dvitel/vpnVpcChecker/tarball/master"
            files: 
              "/home/ubuntu/vpc/students.csv": 
                source: !Sub "https://${USFBucket}.s3.amazonaws.com/s22.csv"
                group: ubuntu
                owner: ubuntu
                mode: '000600'
                authentication: "S3AccessCreds"
              "/home/ubuntu/vpc/cc.pem": 
                source: !Sub "https://${USFBucket}.s3.amazonaws.com/cc.pem"
                group: ubuntu
                owner: ubuntu
                mode: '000600'
                authentication: "S3AccessCreds"
              /etc/systemd/system/vpc-tester.service:
                content: !Sub | 
                  [Unit]
                  Description=VPC tester service
                  [Service]
                  User=ubuntu
                  Environment=USF_VPC_PP=AWSCloud
                  WorkingDirectory=/home/ubuntu/vpc
                  ExecStart=node index.js --server
                  Restart=always
                  [Install]
                  WantedBy=multi-user.target
                mode: '000400'
                owner: root
                group: root    
              /etc/systemd/system/cfn-hup.service:
                content: !Sub |
                  [Unit]
                  Description=cfn-hup daemon
                  [Service]
                  ExecStart=/etc/init.d/cfn-hup -v
                  PIDFile=/var/run/cfn-hup.pid
                  [Install]
                  WantedBy=multi-user.target                                                                                    
              /etc/cfn/cfn-hup.conf:
                content: !Sub |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
                  interval = 5
                mode: '000400'
                owner: root
                group: root
              /etc/cfn/hooks.d/cfn-auto-reloader.conf:
                content: !Sub |
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.VPCTesterInstance.Metadata.AWS::CloudFormation::Init
                  action=/usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource VPCTesterInstance --configsets InstallAndRun --region ${AWS::Region} 
                  runas=root
                mode: '000400'
                owner: root
                group: root
            commands:
              nodeInstall:
                command: 'curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -'
                cwd: "/home/ubuntu"
                ignoreErrors: false 
          Install2:
            packages:
              apt:
                openvpn: []
                nodejs: []
                ca-certificates: []
                fonts-liberation: []
                libappindicator3-1: []
                libasound2: []
                libatk-bridge2.0-0: []
                libatk1.0-0: []
                libc6: []
                libcairo2: []
                libcups2: []
                libdbus-1-3: []
                libexpat1: []
                libfontconfig1: []
                libgbm1: []
                libgcc1: []
                libglib2.0-0: []
                libgtk-3-0: []
                libnspr4: []
                libnss3: []
                libpango-1.0-0: []
                libpangocairo-1.0-0: []
                libstdc++6: []
                libx11-6: []
                libx11-xcb1: []
                libxcb1: []
                libxcomposite1: []
                libxcursor1: []
                libxdamage1: []
                libxext6: []
                libxfixes3: []
                libxi6: []
                libxrandr2: []
                libxrender1: []
                libxss1: []
                libxtst6: []
                lsb-release: []
                wget: []
                xdg-utils: []
            commands:
              npmInstall:
                command: 'npm install'
                cwd: "/home/ubuntu/vpc"
                ignoreErrors: false 
            services: 
              systemd:
                vpc-tester:
                  enabled: "true"
                  ensureRunning: "true"
                  sources: 
                  - "/home/ubuntu/vpc"
                cfn-hup:
                  enabled: 'true'
                  ensureRunning: 'true'
                  files: 
                    - /etc/cfn/cfn-hup.conf
                    - /etc/cfn/hooks.d/cfn-auto-reloader.conf 
    Properties:
      IamInstanceProfile: !Ref VPCTesterInstanceProfile
      ImageId: !FindInMap [Region2AMI, !Ref 'AWS::Region', 'AMI']
      InstanceType: t2.micro
      SecurityGroups:
      - !Ref VPCTesterSecurityGroup
      Tags:
      - Key: Name
        Value: usf-vpc-tester
      KeyName: !Ref KeyName
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash
          apt-get update
          apt-get -y install python3.8 python3-pip
          python3 -m pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          ln -s /root/aws-cfn-bootstrap-latest/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
          /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource VPCTesterInstance --configsets InstallAndRun --region ${AWS::Region} 
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource VPCTesterInstance --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M          
  VPCTesterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows HTTP
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 3001
        ToPort: 3001
        IpProtocol: tcp
      - CidrIp: !Ref SSHCIDR
        FromPort: 22
        ToPort: 22
        IpProtocol: tcp
  # VPCTesterGateway: 
  #   Type: AWS::ApiGatewayV2::Api
  #   Properties: 
  #     Body: !Sub |
  #       {
  #         "openapi" : "3.0.1",
  #         "info" : {
  #           "title" : "vpc-tester",
  #           "version" : "2022-04-05 04:37:36UTC"
  #         },
  #         "servers" : [ {
  #           "url" : "https://ur489fn8we.execute-api.us-east-1.amazonaws.com/{basePath}",
  #           "variables" : {
  #             "basePath" : {
  #               "default" : ""
  #             }
  #           }
  #         } ],
  #         "paths" : {
  #           "/{proxy+}" : {
  #             "parameters" : [ {
  #               "name" : "proxy+",
  #               "in" : "path",
  #               "description" : "Generated path parameter for proxy+",
  #               "required" : true,
  #               "schema" : {
  #                 "type" : "string"
  #               }
  #             } ],
  #             "x-amazon-apigateway-any-method" : {
  #               "responses" : {
  #                 "default" : {
  #                   "description" : "Default response for ANY /{proxy+}"
  #                 }
  #               },
  #               "x-amazon-apigateway-integration" : {
  #                 "requestParameters" : {
  #                   "overwrite:path" : "$request.path"
  #                 },
  #                 "payloadFormatVersion" : "1.0",
  #                 "type" : "http_proxy",
  #                 "httpMethod" : "ANY",
  #                 "uri" : "http://50.19.189.113:3001",
  #                 "connectionType" : "INTERNET"
  #               }
  #             }
  #           }
  #         },
  #         "x-amazon-apigateway-importexport-version" : "1.0"
  #       }
  #     Description: usf-vpc-tester gateway
  #     DisableExecuteApiEndpoint: Boolean
  #     DisableSchemaValidation: Boolean
  #     FailOnWarnings: Boolean
  #     Name: String
  #     ProtocolType: String
  #     RouteKey: String
  #     RouteSelectionExpression: String
  #     Tags: Json
  #     Target: String
  #     Version: String  
        
Outputs:
  WebURL:
    Description: The URL for the web page.
    Value: !Sub 'http://${VPCTesterInstance.PublicIp}:3001'